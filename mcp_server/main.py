# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T16:10:36+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import (
    APIKeyHeader,
    BaseSecurity,
    OAuth2PasswordBearer,
    UnsuportedSecurityStub,
)
from fastapi import Header, UploadFile
from starlette.requests import Request

from models import (
    Client,
    ClientGetResponse,
    OAuth2Error,
    ProblemDetail,
    Token,
    UserInfo,
)

app = MCPProxy(
    contact={
        'email': 'hello@authentiq.com',
        'name': 'Team Authentiq',
        'url': 'https://www.authentiq.com/',
    },
    description='Authentiq Connect OAuth 2.0 and OpenID Connect API reference.\nLearn about [Authentiq ID](https://www.authentiq.com/) or check out the [Authentiq Connect](https://developers.authentiq.com) developer documentation.\n',
    termsOfService='https://www.authentiq.com/terms',
    title='Authentiq Connect API',
    version='1.0',
    servers=[{'url': 'https://connect.authentiq.io'}],
)


@app.get(
    '/authorize',
    description=""" Start a session with Authentiq Connect to authenticate a user.

```
GET https://connect.authentiq.io/authorize?client_id=<your-client-id>&response_type=code+id_token&scope=openid+email&redirect_uri=<your-redirect-uri>&state=0123456789
```

This endpoint also supports the POST method.
 """,
    tags=['user_authentication', 'token_operations'],
)
def authorize(
    client_id: str,
    response_type: str = ...,
    scope: str = ...,
    redirect_uri: str = ...,
    state: str = ...,
    response_mode: Optional[str] = None,
    nonce: Optional[str] = None,
    display: Optional[str] = 'page',
    prompt: Optional[str] = 'login',
    max_age: Optional[int] = 0,
    ui_locales: Optional[str] = None,
):
    """
    Authenticate a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/client',
    description=""" Retrieve a list of clients.
 """,
    tags=['client_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def client():
    """
    List clients
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/client',
    description=""" Register a new client with this Authentiq Connect provider.

This endpoint is compatible with [OIDC's Client Registration](http://openid.net/specs/openid-connect-registration-1_0.html) extension.
 """,
    tags=['client_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_client(body: Client):
    """
    Register a client
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/client/{client_id}',
    description=""" Delete a previously registered client.
 """,
    tags=['client_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def client_client_id(client_id: str):
    """
    Delete a client
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/client/{client_id}',
    description=""" Retrieve the configuration of a previously registered client.
 """,
    tags=['client_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_client(client_id: str):
    """
    View a client
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/client/{client_id}',
    description=""" Update the configuration of a previously registered client.
 """,
    tags=['client_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_client(client_id: str, body: Client = ...):
    """
    Update a client
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/token',
    description=""" Exchange en authorization code for an ID Token or Access Token.

This endpoint supports both `client_secret_basic` (default) and `client_secret_basic` authentication methods, as specified by the client's `token_endpoint_auth_method`.
 """,
    tags=['user_authentication', 'token_operations'],
)
def token(
    authorization: Optional[str] = Header(None, alias='Authorization'),
    request: Request = ...,
):
    """
    Obtain an ID Token
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/userinfo',
    description=""" Use this endpoint to retrieve a user's profile in case you are unable to parse an ID Token or you've not already obtained enough details from the ID Token via the Token Endpoint.
 """,
    tags=['user_profile_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def user_info():
    """
    Retrieve a user profile
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{client_id}/iframe',
    description=""" An OpenID Connect Session Management iframe to facilitate e.g. single sign-on or remote logouts.

The iframe implements the OIDC postMessage-based [change notification protocol](http://openid.net/specs/openid-connect-session-1_0.html#ChangeNotification) via which a client can receive notifications about session state changes.
 """,
    tags=['user_authentication', 'client_operations'],
)
def authorize_iframe(client_id: str):
    """
    Include a session iframe
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
