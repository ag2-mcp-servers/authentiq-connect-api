# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T16:10:36+00:00

from __future__ import annotations

from datetime import datetime
from typing import List, Optional

from pydantic import BaseModel, Field, RootModel, SecretStr


class Address(BaseModel):
    country: Optional[str] = None
    locality: Optional[str] = None
    postal_code: Optional[str] = None
    region: Optional[str] = None
    street_address: Optional[str] = None


class Client(BaseModel):
    application_type: Optional[str] = None
    client_id: Optional[str] = None
    client_name: str
    client_uri: str
    contacts: Optional[List[str]] = None
    default_max_age: Optional[int] = None
    default_scopes: Optional[List[str]] = None
    grant_types: Optional[List[str]] = None
    logo_uri: Optional[str] = None
    policy_uri: Optional[str] = None
    redirect_uris: Optional[List[str]] = None
    response_types: Optional[List[str]] = None
    tos_uri: Optional[str] = None


class OAuth2Error(BaseModel):
    error: str
    error_description: Optional[str] = None


class ProblemDetail(BaseModel):
    detail: Optional[str] = Field(
        None,
        description='Human-readable explanation specific to this occurrence of the problem.\n',
    )
    status: int = Field(
        ..., description='The HTTP status code for this occurrence of the problem.\n'
    )
    title: Optional[str] = Field(
        None, description='Human-readable summary of the problem type.\n'
    )
    type: str


class Session(BaseModel):
    authenticated_at: Optional[datetime] = None
    client_id: Optional[str] = None
    client_name: Optional[str] = None
    client_uri: Optional[str] = None
    concluded_at: Optional[datetime] = None
    connected_at: Optional[datetime] = None
    contacts: Optional[List[str]] = None
    created_at: Optional[str] = None
    deleted_at: Optional[datetime] = None
    logo_uri: Optional[str] = None
    nonce: Optional[str] = None
    policy_uri: Optional[str] = None
    redirect_uri: Optional[str] = None
    response_mode: Optional[str] = None
    response_type: Optional[str] = None
    scopes: Optional[List[str]] = None
    scopes_optional: Optional[List[str]] = None
    scopes_required: Optional[List[str]] = None
    scopes_seen: Optional[List[str]] = None
    scopes_signed: Optional[List[str]] = None
    session_id: Optional[str] = None
    session_state: Optional[str] = None
    session_uri: Optional[str] = None
    sub: Optional[str] = None
    tokens_seen: Optional[List[str]] = None
    tos_uri: Optional[str] = None
    version: Optional[int] = None


class Token(BaseModel):
    access_token: Optional[str] = Field(
        None, description='The access token issued by the authorization server.'
    )
    expires_at: Optional[int] = Field(
        None,
        description='The time the access token will expire in seconds since epoch.',
    )
    expires_in: Optional[int] = Field(
        None, description='The lifetime in seconds of the access token.'
    )
    id_token: Optional[str] = Field(
        None, description='ID Token value associated with the authenticated session.'
    )
    refresh_token: Optional[str] = Field(
        None, description='The refresh token issued to the client, if any.'
    )
    scope: Optional[str] = Field(None, description='The scope of the granted tokens.')
    token_type: str


class AqLocation(BaseModel):
    address: Optional[Address] = None
    latitude: Optional[float] = None
    longitude: Optional[float] = None


class UserInfo(BaseModel):
    address: Optional[Address] = None
    aq_location: Optional[AqLocation] = Field(
        None, alias='aq:location', description='Geolocation structure'
    )
    email: Optional[str] = None
    email_verified: Optional[bool] = None
    family_name: Optional[str] = None
    given_name: Optional[str] = None
    name: Optional[str] = None
    phone_number: Optional[str] = None
    phone_number_verified: Optional[bool] = None
    sub: str


class ClientGetResponse(RootModel[List[Client]]):
    root: List[Client]


class TokenPostRequest(BaseModel):
    client_id: str = Field(..., description='The registered client ID.\n')
    client_secret: SecretStr = Field(
        ..., description='The registered client ID secret.\n'
    )
    code: str = Field(
        ...,
        description='The authorization code previously obtained from the Authentication endpoint.\n',
    )
    grant_type: str = Field(
        ..., description='The authorization grant type, must be `authorization_code`.\n'
    )
    redirect_uri: str = Field(
        ...,
        description='The redirect URL that was used previously with the Authentication endpoint.\n',
    )
